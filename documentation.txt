Documentation for Autonomous Driving General Resources. 
Accurate as of January 2023. 

Global variables: 
    gameState: 
        type: int. 
        Used to control the flow of the program. 
        Please only use stateUp() and checkpoint() functions (below) to manipulate. 
    
    stateTime: 
        type: int. 
        Used to measure time. 
        For brevity, its unit shall henceforth be called a 'tick'. 
        To use, include stateTime++ in your game0() function. 
        Please only use stateTime++ (above) and stateUp() function (below) to manipulate. 
    
    refreshRate: 
        type: constant int. 
        Used to set refresh rate. 
        It is constant at 40. 
        Please do not modify it (it's constant for a reason). 
    
    normalisingFactor: 
        type: constant float. 
        Used to normalise the 'pos' value in the lineFollow functions. 
        It is constant at 5.0f (The f is needed). 
        Please do not modify it.  
    
    maxSpeed: 
        type: constant int. 
        Used in movement functions as y-value in modulo function. 
        It is constant at 100. 
        Please do not modify it. 

Functions in functions.c: 
    isColour(R, G, B); 
        Takes 3 integer inputs, 0 < input < 255. 
        (The input will be modified to the absolute modulo 255 of the value inputted) 
        Returns true if value is within 10 of inputted RGB values. 
    
    isDir(intendedDirection); 
        Takes 1 integer input, 0 < input < 360. Unit: Degrees. 
        (The input will be modified to the absolute modulo 360 of the value inputted)
        Returns true if the current angle is +/- 3 degrees of the intended angle. 
    
    isDirection(intendedDirection, error); 
        Takes 2 integer inputs, 0 < input < 360. Unit: Degrees. 
        (The input will be modified to the absolute modulo 360 of the value inputted) 
        Returns true if the current angle is +/- the error value of the intended angle. 
        
        The isDirection functions for North, South, East, and West have been included. 
        Please note the bearings are counterclockwise. Moreover, North is not necessarily the direction you face when you start. 
    
    isTime(time); 
        Takes 1 input. Unit: Second. 
        'time' is multiplied by refreshRate (= 40) since there are 40 ticks per second, to convert from times game0() is run to seconds. 
        Returns true if stateTime is >= updated time value. 

    getPosBlack(); 
        Takes 0 inputs. 
        When an IR sensor = 0, a value based on how far the sensor is from the centre is added to local variable 'pos'
        'pos' will then be divided by the number of IR sensors for which IR = 0 is true. 
        Should not be called in your code unless you are editing the functions. 
        Returns float 'pos', -5 < pos < 5 
    
    getPosWhite(); 
        Takes 0 inputs. 
        When an IR sensor = 1, a value based on how far the sensor is from the centre is added to local variable 'pos' 
        'pos' will then be divided by the number of IR sensors for which IR = 1 is true. 
        Should not be called in your code unless you are editing the functions. 
        Returns float 'pos', -5 < pos < 5

    lineFollowBlack(speed, proportion); 
        Takes 2 inputs, 0 < speed < 100 
        (Speed will be modified to the modulo maxSpeed (= 100) of the inputted speed value) 
        Sets local variable "pos" to getPosBlack(). The larger the absolute value of 'pos', the faster it turns towards the centre. 
        Returns void. 

    lineFollowWhite(speed, proportion); 
        Takes 2 inputs, 0 < speed < 100 
        (Speed will be modified to the modulo maxSpeed (= 100) of the inputted speed value) 
        Sets local variable "pos" to getPosWhite(). The larger the absolute value of 'pos', the faster it turns towards the centre. 
        Returns void. 

    stateUp(); 
        Takes 0 inputs. 
        Sets stateTime (defined at the top of the file) to 0, increments gameState. 
        Returns void. 

    stop(); 
        Takes 0 inputs. 
        Sets speed of both wheels to 0. 
        Returns void. 


    checkpoint(); 
        Takes 0 inputs. 
        Runs stop(), then turns on the LED. Then, it waits for 1 second, before turning off the LED and running stateUp(). 
        Returns void. 
    
    move(leftWheel, rightWheel); 
        Takes 2 inputs, 0 < input < 100
        (Speed will be modified to the modulo maxSpeed (= 100) of the inputted speed value) 
        Sets speed of WheelLeft and WheelRight to leftWheel and rightWheel respectively. 
        Returns void. 
    
    moveMax(); 
        Takes 0 inputs. 
        Sets speed of WheelLeft and WheelRight to maxSpeed. 
        Returns void. 

Functions in notFuctions.c: 
    All of the functions in function.c; 

    notColour(r, g, B) 
        Takes 3 integer inputs, 0 < input < 255. 
        (The input will be modified to the absolute modulo 255 of the value inputted) 
        Returns true if value is not within 10 of inputted RGB values. 

    notDir(intendedDirection); 
        Takes 1 integer input, 0 < input < 360. Unit: Degrees. 
        (The input will be modified to the absolute modulo 360 of the value inputted)
        Returns true if the current angle is not +/- 3 degrees of the intended angle. 
    
    notDirection(intendedDirection, error); 
        Takes 2 integer inputs, 0 < input < 360. Unit: Degrees. 
        (The input will be modified to the absolute modulo 360 of the value inputted) 
        Returns true if the current angle is not +/- the error value of the intended angle. 
        
        The notDirection functions for North, South, East, and West have been included. 
        Please note that the bearings are counterclockwise. Moreover, North is not necessarily the direction you face when you start. 

    notTime(time); 
        Takes 1 input. Unit: Second. 
        'time' is multiplied by refreshRate (= 40) since there are 40 ticks per second, to convert from times game0() is run to seconds. 
        Returns true if stateTime is not >= updated time value. 

More resources: 
    a posteriori resources (Instructor): 
        https://www.aposteriori.com.sg/resources/ 
    
    Learn c: 
        https://www.geeksforgeeks.org/c-programming-language/?ref=shm
    
    c documentation: 
        https://devdocs.io/c/ 
        /* 
        Please remember that the simulator's compiler does not seem to include standard libraries. 
        i.e. there's no <math.h>, <stdio.h>, nor <time.h>. 
        That's why we must use isTime() to calculate time. 
        */ 
    
    Learn design patterns and refactoring: 
        https://refactoring.guru
    
    Simulator(2023): 
        "AD general resources\RCAP-CSR-ADC-22.4.3.9.exe"